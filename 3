import pandas as pd

melb_data = pd.read_csv('data/melb_data.csv', sep=',')
melb_df = melb_data.copy()
#print(melb_df.head())
#melb_df['Date'] = pd.to_datetime(melb_df['Date'], dayfirst=True)
#melb_df['WeekdaySale'] = melb_df['Date'].dt.dayofweek
#print(melb_df[(melb_df['WeekdaySale']==5)|(melb_df['WeekdaySale']==6)].shape[0])
# На вход данной функции поступает строка с адресом.
def get_street_type(address):
# Создаём список географических пометок exclude_list.
    exclude_list = ['N', 'S', 'W', 'E']
# Метод split() разбивает строку на слова по пробелу.
# В результате получаем список слов в строке и заносим его в переменную address_list.
    address_list = address.split(' ')
# Обрезаем список, оставляя в нём только последний элемент,
# потенциальный подтип улицы, и заносим в переменную street_type.
    street_type = address_list[-1]
# Делаем проверку на то, что полученный подтип является географической пометкой.
# Для этого проверяем его на наличие в списке exclude_list.
    if street_type in exclude_list:
# Если переменная street_type является географической пометкой,
# переопределяем её на второй элемент с конца списка address_list.
        street_type = address_list[-2]
# Возвращаем переменную street_type, в которой хранится подтип улицы.
    return street_type

#street_types = melb_df['Address'].apply(get_street_type)
#popular_stypes = street_types.value_counts().nlargest(10).index
#melb_df['StreetType'] = street_types.apply(lambda x: x if x in popular_stypes else 'other')
#print(melb_df['StreetType'].nunique())
melb_df['Date'] = pd.to_datetime(melb_df['Date'], dayfirst=True)
melb_df['WeekdaySale'] = melb_df['Date'].dt.dayofweek
#print(melb_df[(melb_df['WeekdaySale']==5)|(melb_df['WeekdaySale']==6)])

def get_weekend(weekday):
    if (weekday==5)or(weekday==6):
        return 1
    return 0

#melb_df['Weekday'] = melb_df['WeekdaySale'].apply(get_weekend)
#print(melb_df[melb_df['Weekday']==1]['Price'].mean())
#popular_seller = melb_df['SellerG'].value_counts().nlargest(49)
#melb_df['SellerGNew'] = melb_df['SellerG'].apply(lambda x: x if x in popular_seller else 'other')
#print(melb_df[melb_df['SellerGNew']=='Nelson']['Price'].min()/melb_df[melb_df['SellerGNew']=='other']['Price'].min())
print(melb_df.info())
popular_suburb = melb_df['Suburb'].value_counts().nlargest(119)
melb_df['Suburb'] = melb_df['Suburb'].apply(lambda x: x if x in popular_suburb else 'other')
melb_df['Suburb'] = melb_df['Suburb'].astype('category')
print(melb_df.info())